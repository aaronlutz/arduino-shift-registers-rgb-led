//**************************************************************//
//  Name    : shiftOutCode, Dual Binary Counters                 //
//  Author  : Carlyn Maw, Tom Igoe                               //
//  Date    : 25 Oct, 2006                                       //
//  Version : 1.0                                                //
//  Notes   : Code for using a 74HC595 Shift Register            //
//          : to count from 0 to 255                             //
//**************************************************************//

//Pin connected to ST_CP of 74HC595
int latchPin = 8;
//Pin connected to SH_CP of 74HC595
int clockPin = 12;
////Pin connected to DS of 74HC595
int dataPin = 11;



void setup() {
  //Start Serial for debuging purposes  
  Serial.begin(9600);
  //set pins to output because they are addressed in the main loop
  pinMode(latchPin, OUTPUT);




  
}

void loop() {

  int blueBounce[180][16] = {
{127, 255, 255, 255, 255, 255},
{239, 255, 255, 255, 255, 255},
{253, 255, 255, 255, 255, 255},
{255, 191, 255, 255, 255, 255},
{255, 247, 255, 255, 255, 255},
{255, 254, 255, 255, 255, 255},
{255, 255, 223, 255, 255, 255},
{255, 255, 251, 255, 255, 255},
{255, 255, 255, 127, 255, 255},
{255, 255, 255, 239, 255, 255},
{255, 255, 255, 253, 255, 255},
{255, 255, 255, 255, 191, 255},
{255, 255, 255, 255, 247, 255},
{255, 255, 255, 255, 254, 255},
{255, 255, 255, 255, 255, 223},
{255, 255, 255, 255, 255, 251},
{255, 255, 255, 255, 255, 223},
{255, 255, 255, 255, 254, 255},
{255, 255, 255, 255, 247, 255},
{255, 255, 255, 255, 191, 255},
{255, 255, 255, 253, 255, 255},
{255, 255, 255, 239, 255, 255},
{255, 255, 255, 127, 255, 255},
{255, 255, 251, 255, 255, 255},
{255, 255, 223, 255, 255, 255},
{255, 254, 255, 255, 255, 255},
{255, 247, 255, 255, 255, 255},
{255, 191, 255, 255, 255, 255},
{253, 255, 255, 255, 255, 255},
{239, 255, 255, 255, 255, 255},
{63, 255, 255, 255, 255, 255},
{231, 255, 255, 255, 255, 255},
{252, 255, 255, 255, 255, 255},
{255, 159, 255, 255, 255, 255},
{255, 243, 255, 255, 255, 255},
{255, 254, 127, 255, 255, 255},
{255, 255, 207, 255, 255, 255},
{255, 255, 249, 255, 255, 255},
{255, 255, 255, 63, 255, 255},
{255, 255, 255, 231, 255, 255},
{255, 255, 255, 252, 255, 255},
{255, 255, 255, 255, 159, 255},
{255, 255, 255, 255, 243, 255},
{255, 255, 255, 255, 254, 127},
{255, 255, 255, 255, 255, 207},
{255, 255, 255, 255, 255, 249},
{255, 255, 255, 255, 255, 207},
{255, 255, 255, 255, 254, 127},
{255, 255, 255, 255, 243, 255},
{255, 255, 255, 255, 159, 255},
{255, 255, 255, 252, 255, 255},
{255, 255, 255, 231, 255, 255},
{255, 255, 255, 63, 255, 255},
{255, 255, 249, 255, 255, 255},
{255, 255, 207, 255, 255, 255},
{255, 254, 127, 255, 255, 255},
{255, 243, 255, 255, 255, 255},
{255, 159, 255, 255, 255, 255},
{252, 255, 255, 255, 255, 255},
{231, 255, 255, 255, 255, 255},
{191, 255, 255, 255, 255, 255},
{247, 255, 255, 255, 255, 255},
{254, 255, 255, 255, 255, 255},
{255, 223, 255, 255, 255, 255},
{255, 251, 255, 255, 255, 255},
{255, 255, 127, 255, 255, 255},
{255, 255, 239, 255, 255, 255},
{255, 255, 253, 255, 255, 255},
{255, 255, 255, 191, 255, 255},
{255, 255, 255, 247, 255, 255},
{255, 255, 255, 254, 255, 255},
{255, 255, 255, 255, 223, 255},
{255, 255, 255, 255, 251, 255},
{255, 255, 255, 255, 255, 127},
{255, 255, 255, 255, 255, 239},
{255, 255, 255, 255, 255, 253},
{255, 255, 255, 255, 255, 239},
{255, 255, 255, 255, 255, 127},
{255, 255, 255, 255, 251, 255},
{255, 255, 255, 255, 223, 255},
{255, 255, 255, 254, 255, 255},
{255, 255, 255, 247, 255, 255},
{255, 255, 255, 191, 255, 255},
{255, 255, 253, 255, 255, 255},
{255, 255, 239, 255, 255, 255},
{255, 255, 127, 255, 255, 255},
{255, 251, 255, 255, 255, 255},
{255, 223, 255, 255, 255, 255},
{254, 255, 255, 255, 255, 255},
{247, 255, 255, 255, 255, 255},
{223, 255, 255, 255, 255, 255},
{251, 255, 255, 255, 255, 255},
{255, 127, 255, 255, 255, 255},
{255, 239, 255, 255, 255, 255},
{255, 253, 255, 255, 255, 255},
{255, 255, 191, 255, 255, 255},
{255, 255, 247, 255, 255, 255},
{255, 255, 254, 255, 255, 255},
{255, 255, 255, 223, 255, 255},
{255, 255, 255, 251, 255, 255},
{255, 255, 255, 255, 127, 255},
{255, 255, 255, 255, 239, 255},
{255, 255, 255, 255, 253, 255},
{255, 255, 255, 255, 255, 191},
{255, 255, 255, 255, 255, 247},
{255, 255, 255, 255, 255, 254},
{255, 255, 255, 255, 255, 247},
{255, 255, 255, 255, 255, 191},
{255, 255, 255, 255, 253, 255},
{255, 255, 255, 255, 239, 255},
{255, 255, 255, 255, 127, 255},
{255, 255, 255, 251, 255, 255},
{255, 255, 255, 223, 255, 255},
{255, 255, 254, 255, 255, 255},
{255, 255, 247, 255, 255, 255},
{255, 255, 191, 255, 255, 255},
{255, 253, 255, 255, 255, 255},
{255, 239, 255, 255, 255, 255},
{255, 127, 255, 255, 255, 255},
{251, 255, 255, 255, 255, 255},
{159, 255, 255, 255, 255, 255},
{243, 255, 255, 255, 255, 255},
{254, 127, 255, 255, 255, 255},
{255, 207, 255, 255, 255, 255},
{255, 249, 255, 255, 255, 255},
{255, 255, 63, 255, 255, 255},
{255, 255, 231, 255, 255, 255},
{255, 255, 252, 255, 255, 255},
{255, 255, 255, 159, 255, 255},
{255, 255, 255, 243, 255, 255},
{255, 255, 255, 254, 127, 255},
{255, 255, 255, 255, 207, 255},
{255, 255, 255, 255, 249, 255},
{255, 255, 255, 255, 255, 63},
{255, 255, 255, 255, 255, 231},
{255, 255, 255, 255, 255, 252},
{255, 255, 255, 255, 255, 231},
{255, 255, 255, 255, 255, 63},
{255, 255, 255, 255, 249, 255},
{255, 255, 255, 255, 207, 255},
{255, 255, 255, 254, 127, 255},
{255, 255, 255, 243, 255, 255},
{255, 255, 255, 159, 255, 255},
{255, 255, 252, 255, 255, 255},
{255, 255, 231, 255, 255, 255},
{255, 255, 63, 255, 255, 255},
{255, 249, 255, 255, 255, 255},
{255, 207, 255, 255, 255, 255},
{254, 127, 255, 255, 255, 255},
{243, 255, 255, 255, 255, 255},
{95, 255, 255, 255, 255, 255},
{235, 255, 255, 255, 255, 255},
{253, 127, 255, 255, 255, 255},
{255, 175, 255, 255, 255, 255},
{255, 245, 255, 255, 255, 255},
{255, 254, 191, 255, 255, 255},
{255, 255, 215, 255, 255, 255},
{255, 255, 250, 255, 255, 255},
{255, 255, 255, 95, 255, 255},
{255, 255, 255, 235, 255, 255},
{255, 255, 255, 253, 127, 255},
{255, 255, 255, 255, 175, 255},
{255, 255, 255, 255, 245, 255},
{255, 255, 255, 255, 254, 191},
{255, 255, 255, 255, 255, 215},
{255, 255, 255, 255, 255, 250},
{255, 255, 255, 255, 255, 215},
{255, 255, 255, 255, 254, 191},
{255, 255, 255, 255, 245, 255},
{255, 255, 255, 255, 175, 255},
{255, 255, 255, 253, 127, 255},
{255, 255, 255, 235, 255, 255},
{255, 255, 255, 95, 255, 255},
{255, 255, 250, 255, 255, 255},
{255, 255, 215, 255, 255, 255},
{255, 254, 191, 255, 255, 255},
{255, 245, 255, 255, 255, 255},
{255, 175, 255, 255, 255, 255},
{253, 127, 255, 255, 255, 255},
{235, 255, 255, 255, 255, 255}
};



  for (int x = 0; x < 180; x++) {
    shiftSet(dataPin, clockPin, blueBounce[x]);
    delay(80);
  }

  
}

void shiftSet(int myDataPin, int MyClockPin, int shiftRow[8]) {
  digitalWrite(latchPin, 0);
  shiftOut(dataPin, clockPin, shiftRow[0]);
  shiftOut(dataPin, clockPin, shiftRow[1]);
  shiftOut(dataPin, clockPin, shiftRow[2]);
  shiftOut(dataPin, clockPin, shiftRow[3]);
  shiftOut(dataPin, clockPin, shiftRow[4]);
  shiftOut(dataPin, clockPin, shiftRow[5]);
  digitalWrite(latchPin, 1);  
}

void shiftOut(int myDataPin, int myClockPin, byte myDataOut) {
  // This shifts 8 bits out MSB first, 
  //on the rising edge of the clock,
  //clock idles low

  //internal function setup
  int i=0;
  int pinState;
  pinMode(myClockPin, OUTPUT);
  pinMode(myDataPin, OUTPUT);

 //clear everything out just in case to
 //prepare shift register for bit shifting
  digitalWrite(myDataPin, 0);
  digitalWrite(myClockPin, 0);

  //for each bit in the byte myDataOutï¿½
  //NOTICE THAT WE ARE COUNTING DOWN in our for loop
  //This means that %00000001 or "1" will go through such
  //that it will be pin Q0 that lights. 
  for (i=7; i>=0; i--)  {
    digitalWrite(myClockPin, 0);

    //if the value passed to myDataOut and a bitmask result 
    // true then... so if we are at i=6 and our value is
    // %11010100 it would the code compares it to %01000000 
    // and proceeds to set pinState to 1.
    if ( myDataOut & (1<<i) ) {
      pinState= 1;
    }
    else {  
      pinState= 0;
    }

    //Sets the pin to HIGH or LOW depending on pinState
    digitalWrite(myDataPin, pinState);
    //register shifts bits on upstroke of clock pin  
    digitalWrite(myClockPin, 1);
    //zero the data pin after shift to prevent bleed through
    digitalWrite(myDataPin, 0);
  }

  //stop shifting
  digitalWrite(myClockPin, 0);
}
